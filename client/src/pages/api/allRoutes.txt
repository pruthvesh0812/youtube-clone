#routes


{
    "email":"pruthvesh@gmail.com",
    "password":"pruthvesh"
}

{
    "channelName":"Sadhguru",
    "channelSubscribers":100000,
    "channelProfilePhotoLink":"https://asdfkasldfk.jpg"
}

{
    "videoTitle":"Sadhguru live stream",
    "videoDescription":"live streaming mahashivratri",
    "likeCount":0,
    "viewCount":0,
    "pulishedDate":"28/01/2024",
    "thumbnailImageLink":"thumbnailaskdflas",
    "videoLink":"videoLinkdsflsdfasdlf"
}

{
    "numVideoToFetch":2,
    "startVideoId":1 //note this field is exclusive, video will be from 2-3 , and not 1-2
}

### solving req.query type problem

import { Request, Response, NextFunction } from 'express';

// controller
export const getThings = (req: Request, res: Response, next: NextFunction) => {

  const foo: string = req.query.foo as string; <------------------
  const bar:string = req.query.bar as string;
  const something: string = req.query.something as string;
  console.log(foo, bar, something);

  res.status(200).json({ message: 'Welcome to KindaCode.com!' });
};


#######what is res.end()
//res.end() Functionality:
            //res.end() is typically called when you have finished processing the request, and you want to send the response back to the client.
            //It signals the end of the response, and after calling res.end(), you should not modify the res object or attempt to send any more data.

/login - to login
/signup - to signup
/me - to check if user logged in before accessing protected routes

/ - home route - shows video on home page
/results?search_query= - to get searched videos thumbnails
/get_video - to play the video in player on clicking the thumbnails

/upload_video - upload video and thumbnail

#all status codes :)

Certainly! Here's a more exhaustive list of HTTP status codes with explanations:

### 1xx - Informational
- **100 Continue**: The server has received the request headers and the client should proceed with the request.
- **101 Switching Protocols**: The server is acknowledging the request and is switching to a different protocol.
- **102 Processing**: The server is still processing the request (used in WebDAV).

### 2xx - Success
- **200 OK**: The request was successful.
- **201 Created**: The request has been fulfilled, and a new resource has been created.
- **202 Accepted**: The request has been accepted for processing, but the processing has not been completed.
- **203 Non-Authoritative Information**: The server is a transforming proxy and received a 200 OK response from the origin, but is returning a modified version of the origin's response.
- **204 No Content**: The server successfully processed the request, but there is no content to send in the response.
- **205 Reset Content**: Instructs the client to reset the document view, which clears the form data.
- **206 Partial Content**: The server is delivering only part of the resource due to a range header sent by the client.
- **207 Multi-Status**: Provides status for multiple independent operations.
- **208 Already Reported**: Used inside a DAV: propstat response element to avoid enumerating the internal members of multiple bindings to the same collection repeatedly.
- **226 IM Used**: The server has fulfilled a GET request for the resource and the response is a representation of the result of one or more instance-manipulations applied to the current instance.

### 3xx - Redirection
- **300 Multiple Choices**: The requested resource has multiple choices.
- **301 Moved Permanently**: The requested resource has been permanently moved to a new location.
- **302 Found**: The requested resource temporarily resides at a different location.
- **303 See Other**: The response to the request can be found under another URI using a GET method.
- **304 Not Modified**: The resource has not been modified since the last request.
- **305 Use Proxy**: The requested resource must be accessed through the proxy given by the Location field.
- **307 Temporary Redirect**: Similar to 302, but the client should continue with the same request to the new location.
- **308 Permanent Redirect**: The request and all future requests should be repeated using another URI.

### 4xx - Client Error
- **400 Bad Request**: The server cannot process the request due to a client error.
- **401 Unauthorized**: The client must authenticate itself to get the requested response.
- **402 Payment Required**: Reserved for future use. Originally intended for digital cash or micropayment systems.
- **403 Forbidden**: The client does not have the necessary permission to access the requested resource.
- **404 Not Found**: The server cannot find the requested resource.
- **405 Method Not Allowed**: The method specified in the request is not allowed for the resource identified by the request URI.
- **406 Not Acceptable**: The server can only generate a response that is not accepted by the client.
- **407 Proxy Authentication Required**: The client must first authenticate itself with the proxy.
- **408 Request Timeout**: The server timed out waiting for the request.
- **409 Conflict**: Indicates that the request could not be processed because of conflict in the request.
- **410 Gone**: Indicates that the resource requested is no longer available and will not be available again.
- **411 Length Required**: The request did not specify the length of its content, which is required by the requested resource.
- **412 Precondition Failed**: The server does not meet one of the preconditions that the requester put on the request.
- **413 Payload Too Large**: The request is larger than the server is willing or able to process.
- **414 URI Too Long**: The URI provided was too long for the server to process.
- **415 Unsupported Media Type**: The server does not support the media type that the client specified.
- **416 Range Not Satisfiable**: The client has asked for a portion of the file but the server cannot supply that portion.
- **417 Expectation Failed**: The server cannot meet the requirements of the Expect request-header field.
- **418 I'm a teapot**: This code was defined in 1998 as one of the traditional IETF April Fools' jokes.
- **421 Misdirected Request**: The request was directed at a server that is not able to produce a response.
- **422 Unprocessable Entity**: The request was well-formed but was unable to be followed due to semantic errors.
- **423 Locked**: The resource that is being accessed is locked.
- **424 Failed Dependency**: The request failed due to failure of a previous request.
- **425 Too Early**: Indicates that the server is unwilling to risk processing a request that might be replayed.
- **426 Upgrade Required**: The client should switch to a different protocol.
- **428 Precondition Required**: The origin server requires the request to be conditional.
- **429 Too Many Requests**: The user has sent too many requests in a given amount of time.
- **431 Request Header Fields Too Large**: The server is unwilling to process the request because its header fields are too large.
- **451 Unavailable For Legal Reasons**: A server operator has received a legal demand to deny access to a resource.

### 5xx - Server Error
- **500 Internal Server Error**: A generic error message indicating that the server has encountered a situation it doesn't know how to handle.
- **501 Not Implemented**: The server does not support the functionality required to fulfill the request.
- **502 Bad Gateway**: The server, while acting as a gateway or proxy, received an invalid response from the upstream server.
- **503 Service Unavailable**: The server is not ready to handle the request. Common causes include a server that is down for maintenance or is overloaded.
- **504 Gateway Timeout**: The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server.
- **505 HTTP Version Not Supported**: The server does not support the HTTP protocol version used in the request.
- **506 Variant Also Negotiates**: Transparent content negotiation for the request results in a circular reference.
- **507 Insufficient Storage**: The server is unable to store the representation needed to complete the request.
- **508 Loop Detected**: The server detected an infinite loop while processing a request.
- **510 Not Extended**: Further extensions to the request are required for the server to fulfill it.
- **511 Network Authentication Required**: The client needs to authenticate to gain network access.

These status codes are standardized by the Internet Assigned Numbers Authority (IANA) and are part of the HTTP/1.1 protocol defined in RFC 7231 and related documents. They help communicate the outcome of HTTP requests and responses between clients and servers.

#db schema

postgres

table - user - pk 
      - userid
      - email
      - password

table - channel - ref userid
      - channelId
      - channelName
      - channelSubs
      - channelProfilePhoto
      - userId(reference from user table)

table - videos
      - videoId
      - channelId (reference from channel table)
      - videoTitle
      - videoDescription
      - numberOfLikes
      - numberOfViews
      - publishedDate
      - thumbnail photo

